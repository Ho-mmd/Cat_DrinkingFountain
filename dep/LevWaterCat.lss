
LevWaterCat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  00000272  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000064  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ee  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007f  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000014a  00000000  00000000  00000463  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a8  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

//LED(v)

int main(void) {
	
	cli();
  ce:	f8 94       	cli

	DDRF = 0x00; //AD input
  d0:	10 92 61 00 	sts	0x0061, r1
	DDRB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;	
  d8:	81 bb       	out	0x11, r24	; 17

	TCCR0 = (0<<FOC0) | (1<<WGM00) | (1<<COM01) | (1<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00 ); //PWM
  da:	81 e7       	ldi	r24, 0x71	; 113
  dc:	83 bf       	out	0x33, r24	; 51

	sei();
  de:	78 94       	sei

	TIMSK = 0x04;
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00; 
  e4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05; //clk select
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	8e bd       	out	0x2e, r24	; 46

	TCNT1H = 0xFF; //초기에 overflow 발생시기 당김
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xC0;
  ee:	80 ec       	ldi	r24, 0xC0	; 192
  f0:	8c bd       	out	0x2c, r24	; 44

	ADMUX = 0x00;
  f2:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x83;
  f4:	83 e8       	ldi	r24, 0x83	; 131
  f6:	86 b9       	out	0x06, r24	; 6
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x2a>

000000fa <__vector_14>:
	} while (1);

	return 0;
}

ISR(TIMER1_OVF_vect) { 
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
	cli();
 116:	f8 94       	cli

	TCNT1H = 0xFE; //0.02초 (20ms, 50Hz, duty cycle = 5%)
 118:	8e ef       	ldi	r24, 0xFE	; 254
 11a:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xC6;
 11c:	86 ec       	ldi	r24, 0xC6	; 198
 11e:	8c bd       	out	0x2c, r24	; 44

	ADCSRA |= 0x40; //ADC start, (1<<ADSC)
 120:	36 9a       	sbi	0x06, 6	; 6

	while(ADCSRA&0x40); //Wait until ADCSRA & 0x40 != 0, (1<<ADSC)
 122:	36 99       	sbic	0x06, 6	; 6
 124:	fe cf       	rjmp	.-4      	; 0x122 <__vector_14+0x28>

	ADC_Low = ADCL;  //Low value First
 126:	84 b1       	in	r24, 0x04	; 4
 128:	80 93 04 01 	sts	0x0104, r24
	ADC_High = ADCH;
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	80 93 03 01 	sts	0x0103, r24
	ADC_Result = (ADC_Low + ADC_High * 256) / 30;
 132:	30 91 04 01 	lds	r19, 0x0104
 136:	20 91 03 01 	lds	r18, 0x0103
 13a:	92 2f       	mov	r25, r18
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	83 0f       	add	r24, r19
 140:	91 1d       	adc	r25, r1
 142:	6e e1       	ldi	r22, 0x1E	; 30
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
 14a:	70 93 06 01 	sts	0x0106, r23
 14e:	60 93 05 01 	sts	0x0105, r22

	flag++;
 152:	80 91 01 01 	lds	r24, 0x0101
 156:	90 91 02 01 	lds	r25, 0x0102
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 02 01 	sts	0x0102, r25
 160:	80 93 01 01 	sts	0x0101, r24

	if(flag < ADC_Result) {
 164:	20 91 01 01 	lds	r18, 0x0101
 168:	30 91 02 01 	lds	r19, 0x0102
 16c:	80 91 05 01 	lds	r24, 0x0105
 170:	90 91 06 01 	lds	r25, 0x0106
 174:	28 17       	cp	r18, r24
 176:	39 07       	cpc	r19, r25
 178:	18 f4       	brcc	.+6      	; 0x180 <__vector_14+0x86>
		PORTD = 0x10;
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	05 c0       	rjmp	.+10     	; 0x18a <__vector_14+0x90>
	} else {
		PORTD = 0x00;
 180:	12 ba       	out	0x12, r1	; 18
		flag = 0;
 182:	10 92 02 01 	sts	0x0102, r1
 186:	10 92 01 01 	sts	0x0101, r1
	}

	OCR0 = 190;
 18a:	8e eb       	ldi	r24, 0xBE	; 190
 18c:	81 bf       	out	0x31, r24	; 49

	sei();
 18e:	78 94       	sei

}
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__divmodhi4>:
 1ac:	97 fb       	bst	r25, 7
 1ae:	09 2e       	mov	r0, r25
 1b0:	07 26       	eor	r0, r23
 1b2:	0a d0       	rcall	.+20     	; 0x1c8 <__divmodhi4_neg1>
 1b4:	77 fd       	sbrc	r23, 7
 1b6:	04 d0       	rcall	.+8      	; 0x1c0 <__divmodhi4_neg2>
 1b8:	0c d0       	rcall	.+24     	; 0x1d2 <__udivmodhi4>
 1ba:	06 d0       	rcall	.+12     	; 0x1c8 <__divmodhi4_neg1>
 1bc:	00 20       	and	r0, r0
 1be:	1a f4       	brpl	.+6      	; 0x1c6 <__divmodhi4_exit>

000001c0 <__divmodhi4_neg2>:
 1c0:	70 95       	com	r23
 1c2:	61 95       	neg	r22
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255

000001c6 <__divmodhi4_exit>:
 1c6:	08 95       	ret

000001c8 <__divmodhi4_neg1>:
 1c8:	f6 f7       	brtc	.-4      	; 0x1c6 <__divmodhi4_exit>
 1ca:	90 95       	com	r25
 1cc:	81 95       	neg	r24
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	08 95       	ret

000001d2 <__udivmodhi4>:
 1d2:	aa 1b       	sub	r26, r26
 1d4:	bb 1b       	sub	r27, r27
 1d6:	51 e1       	ldi	r21, 0x11	; 17
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <__udivmodhi4_ep>

000001da <__udivmodhi4_loop>:
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	a6 17       	cp	r26, r22
 1e0:	b7 07       	cpc	r27, r23
 1e2:	10 f0       	brcs	.+4      	; 0x1e8 <__udivmodhi4_ep>
 1e4:	a6 1b       	sub	r26, r22
 1e6:	b7 0b       	sbc	r27, r23

000001e8 <__udivmodhi4_ep>:
 1e8:	88 1f       	adc	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	5a 95       	dec	r21
 1ee:	a9 f7       	brne	.-22     	; 0x1da <__udivmodhi4_loop>
 1f0:	80 95       	com	r24
 1f2:	90 95       	com	r25
 1f4:	bc 01       	movw	r22, r24
 1f6:	cd 01       	movw	r24, r26
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
