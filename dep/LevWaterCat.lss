
LevWaterCat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  000001fe  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000064  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ee  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007f  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000132  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a8  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

//LED(v)

int main(void) {
	
	cli();
  ce:	f8 94       	cli

	DDRF = 0x00; //AD input
  d0:	10 92 61 00 	sts	0x0061, r1
	DDRB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23

	sei();
  d8:	78 94       	sei

	TIMSK = 0x04;
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00; 
  de:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05; //clk select
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	8e bd       	out	0x2e, r24	; 46

	TCNT1H = 0xFF; //초기에 overflow 발생시기 당김
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xC0;
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	8c bd       	out	0x2c, r24	; 44

	ADMUX = 0x00;
  ec:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x83;
  ee:	83 e8       	ldi	r24, 0x83	; 131
  f0:	86 b9       	out	0x06, r24	; 6
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x24>

000000f4 <__vector_14>:
	} while (1);

	return 0;
}

ISR(TIMER1_OVF_vect) { 
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	cli();
 106:	f8 94       	cli

	TCNT1H = 0xFF; //0.002초 (20ms, 50Hz, duty cycle = 5%)
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xFB;
 10c:	8b ef       	ldi	r24, 0xFB	; 251
 10e:	8c bd       	out	0x2c, r24	; 44

	ADCSRA |= 0x40; //ADC start, (1<<ADSC)
 110:	36 9a       	sbi	0x06, 6	; 6

	while(ADCSRA&0x40); //Wait until ADCSRA & 0x40 != 0, (1<<ADSC)
 112:	36 99       	sbic	0x06, 6	; 6
 114:	fe cf       	rjmp	.-4      	; 0x112 <__vector_14+0x1e>

	ADC_Low = ADCL;  //Low value First
 116:	84 b1       	in	r24, 0x04	; 4
 118:	80 93 04 01 	sts	0x0104, r24
	ADC_High = ADCH;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 93 03 01 	sts	0x0103, r24
	ADC_Result = ADC_Low + ADC_High * 256;
 122:	30 91 04 01 	lds	r19, 0x0104
 126:	20 91 03 01 	lds	r18, 0x0103
 12a:	92 2f       	mov	r25, r18
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	83 0f       	add	r24, r19
 130:	91 1d       	adc	r25, r1
 132:	90 93 06 01 	sts	0x0106, r25
 136:	80 93 05 01 	sts	0x0105, r24

	flag++;
 13a:	80 91 01 01 	lds	r24, 0x0101
 13e:	90 91 02 01 	lds	r25, 0x0102
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 02 01 	sts	0x0102, r25
 148:	80 93 01 01 	sts	0x0101, r24

	if(flag < ADC_Result) {
 14c:	20 91 01 01 	lds	r18, 0x0101
 150:	30 91 02 01 	lds	r19, 0x0102
 154:	80 91 05 01 	lds	r24, 0x0105
 158:	90 91 06 01 	lds	r25, 0x0106
 15c:	28 17       	cp	r18, r24
 15e:	39 07       	cpc	r19, r25
 160:	18 f4       	brcc	.+6      	; 0x168 <__vector_14+0x74>
		PORTB = 0x10;
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	88 bb       	out	0x18, r24	; 24
 166:	05 c0       	rjmp	.+10     	; 0x172 <__vector_14+0x7e>
	} else {
		PORTB = 0x00;
 168:	18 ba       	out	0x18, r1	; 24
		flag = 0;
 16a:	10 92 02 01 	sts	0x0102, r1
 16e:	10 92 01 01 	sts	0x0101, r1
	}


	sei();
 172:	78 94       	sei

}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
